kind: "Template"
apiVersion: "v1"
metadata:
  name: "deployment-template"
labels:
  template: "deployment-template"
parameters:

  - name: "API_REPOSITORY"
    description: "SPAship orchestrator repository"
    value: "quay.io/spaship/api"
    required: true
  - name: "TAG_API"
    description: "tag of the api"
    value: master
    required: true
  - name: "TAG_OPERATOR"
    description: "tag of the orchestrator"
    value: master
    required: true
  - name: "OPERATOR_REPOSITORY"
    description: "SPAship operator repository"
    value: "quay.io/spaship/operator"
    required: true
  - name: "TAG_MANAGER"
    description: "tag of the manager ui"
    value: master
    required: true
  - name: "MANAGER_REPOSITORY"
    description: "SPAship UI repository"
    value: "quay.io/spaship/manager"
    required: true
  - name: "STORAGE_CLASS"
    description: "volume of the deployment"
    value: "gp2"
    required: false
  - name: "MONGO_REPOSITORY"
    description: "mongodb container repository"
    value: "quay.io/arbhatta/mongo:4.2.8"
    required: false
  - name: "API_URL"
    description: "api url for spaship orchestrator"
    value: "localhost:3000"
    required: true
  - name: "UI_MEMORY_LIMIT"
    description: "memory limit for spaship ui"
    value: "512Mi"
    required: true
  - name: "DOMAIN"
    required: true
  - name: "APP_INSTANCE"
    description: "application instance"
    required: true
  - name: "KEYCLOAK_CLIENTID"
    description: "identity provider's client id"
    required: true
  - name: "KEYCLOAK_ID_PROP"
    description: "identity provider's id"
    required: true
  - name: "KEYCLOAK_PUBKEY"
    description: "identity provider's access public key"
    required: true
  - name: "KEYCLOAK_REALM"
    description: "realm of authentication and authorization"
    required: true
  - name: "KEYCLOAK_URL"
    description: "identity provider's url"
    required: true
  - name: "API_AUTH_ADMIN_GROUP"
    description: "api auth ldap admin group"
    required: true
  - name: "API_AUTH_USER_GROUP"
    description: "api auth ldap user group"
    required: true
  - name: "API_JWT_SECRET"
    description: "secret key for jwt token generated by orchestrator"
    required: true
  - name: "API_JWT_EXPIRY"
    description: "JWT expiry time"
    required: true

objects:
  - kind: Service
    apiVersion: v1
    metadata:
      name: spaship-mongo
      labels:
        app.kubernetes.io/name: spaship-mongo
        app.kubernetes.io/instance: spaship-mongo
        app.kubernetes.io/managed-by: light-cd
    spec:
      ports:
        - protocol: TCP
          port: 27017
          targetPort: 27017
      clusterIP: None
      selector:
        app: spaship-mongo
        app.kubernetes.io/managed-by: light-cd

  - kind: Service
    apiVersion: v1
    metadata:
      name: spaship-api-service
      labels:
        app.kubernetes.io/name: spaship-api
        app.kubernetes.io/instance: spaship-api
        app.kubernetes.io/version: 1.0.0
        app.kubernetes.io/managed-by: spaship
    spec:
      type: ClusterIP
      clusterIP: None
      ports:
        - port: 3000
          targetPort: http
          protocol: TCP
          name: http
      selector:
        app.kubernetes.io/name: spaship-api
        app.kubernetes.io/instance: spaship-api

  - kind: Service
    apiVersion: v1
    metadata:
      name: operator-service
      labels:
        app.kubernetes.io/name: operator
        app.kubernetes.io/instance: operator
        app.kubernetes.io/version: 1.0.0
        app.kubernetes.io/managed-by: spaship
    spec:
      type: ClusterIP
      clusterIP: None
      ports:
        - port: 8080
          targetPort: http
          protocol: TCP
          name: http
      selector:
        app.kubernetes.io/name: operator
        app.kubernetes.io/instance: operator


  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: spaship-api-config
      labels:
        app.kubernetes.io/name: spaship-api
        app.kubernetes.io/instance: spaship-api
        app.kubernetes.io/version: 1.0.0
        app.kubernetes.io/managed-by: spaship
    data:
      SPASHIP_DB__MONGO__URL: spaship-mongo-0.spaship-mongo:27017
      SPASHIP_AUTH__KEYCLOAK__CLIENTID: ${KEYCLOAK_CLIENTID}
      SPASHIP_AUTH__KEYCLOAK__ID_PROP: ${KEYCLOAK_ID_PROP}
      SPASHIP_AUTH__KEYCLOAK__PUBKEY: ${KEYCLOAK_PUBKEY}
      SPASHIP_AUTH__KEYCLOAK__REALM: ${KEYCLOAK_REALM}
      SPASHIP_AUTH__KEYCLOAK__URL: ${KEYCLOAK_URL}
      SPASHIP_AUTH__LDAP__ADMIN_GROUP: ${API_AUTH_ADMIN_GROUP}
      SPASHIP_AUTH__LDAP__USER_GROUP: ${API_AUTH_USER_GROUP}
      OPERATOR_BASEPATH: "http://operator-service:8080"
      TOKEN_SECRET: ${API_JWT_SECRET}
      TOKEN_EXPIRATION: ${API_JWT_EXPIRY}
      ORCHESTRATOR_BASEPATH: http://${APP_INSTANCE}.api.${DOMAIN}

  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: operator-config
      labels:
        app.kubernetes.io/name: operator
        app.kubernetes.io/instance: operator
        app.kubernetes.io/version: 1.0.0
        app.kubernetes.io/managed-by: spaship
    data:
      OPERATOR_EVENT_BUS_ADDRESS: spa-ops-event-channel
      OPERATOR_DOMAIN_NAME: ${DOMAIN}
      APP_INSTANCE: ${APP_INSTANCE}
      STORAGE_CLASS: ${STORAGE_CLASS}

  - kind: StatefulSet
    apiVersion: apps/v1
    metadata:
      name: spaship-mongo
      labels:
        app: spaship-mongo
        app.kubernetes.io/managed-by: light-cd
        app.openshift.io/runtime: mongodb
        app.kubernetes.io/part-of: spaship
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: spaship-mongo
          app.kubernetes.io/managed-by: light-cd
      serviceName: spaship-mongo
      template:
        metadata:
          labels:
            app: spaship-mongo
            app.kubernetes.io/managed-by: light-cd
        spec:
          terminationGracePeriodSeconds: 30
          imagePullSecrets:
            - name: regcred
          containers:
            - name: mongo
              image: "${MONGO_REPOSITORY}"
              imagePullPolicy: IfNotPresent
              command:
                - mongod
                - "--bind_ip_all"
                - "--replSet"
                - rs0
              ports:
                - name: mongo-port
                  containerPort: 27017
                  protocol: TCP
              livenessProbe:
                tcpSocket:
                  port: mongo-port
                initialDelaySeconds: 5
                periodSeconds: 10
              readinessProbe:
                tcpSocket:
                  port: mongo-port
                initialDelaySeconds: 15
                periodSeconds: 20
              volumeMounts:
                - name: mongo-volume
                  mountPath: /data/db
      volumeClaimTemplates:
        - metadata:
            annotations:
              kubernetes.io/reclaimPolicy: Delete
            labels:
              paas.redhat.com/appcode: SPAS-001
            name: mongo-volume
          spec:
            accessModes: [ "ReadWriteOnce" ]
            storageClassName: "${STORAGE_CLASS}"
            resources:
              requests:
                storage: 2Gi

  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: spaship-api
      labels:
        app.kubernetes.io/name: spaship-api
        app.kubernetes.io/instance: spaship-api
        app.kubernetes.io/version: 1.0.0
        app.kubernetes.io/managed-by: spaship
        app.openshift.io/runtime: nodejs
        app.kubernetes.io/part-of: spaship
      annotations:
        app.openshift.io/connects-to: >-
          [{"apiVersion":"apps/v1","kind":"StatefulSet","name":"spaship-mongo"}]
    spec:
      selector:
        matchLabels:
          app.kubernetes.io/name: spaship-api
          app.kubernetes.io/instance: spaship-api
      template:
        metadata:
          labels:
            app.kubernetes.io/name: spaship-api
            app.kubernetes.io/instance: spaship-api
        spec:
          containers:
            - name: api
              image: "${API_REPOSITORY}:${TAG_API}"
              envFrom:
                - configMapRef:
                    name: spaship-api-config
              imagePullPolicy: Always
              ports:
                - name: http
                  containerPort: 2345
                  protocol: TCP
              livenessProbe:
                tcpSocket:
                  port: http
                initialDelaySeconds: 30
                periodSeconds: 10
              readinessProbe:
                tcpSocket:
                  port: http
                initialDelaySeconds: 30
                periodSeconds: 10
              resources:
                limits:
                  cpu: 600m
                  memory: 512Mi
                requests:
                  cpu: 300m
                  memory: 256Mi
          initContainers:
            - name: ini-mongodb
              image: quay.io/arbhatta/busybox
              imagePullPolicy: IfNotPresent
              command: [ 'sh','-c','until nslookup spaship-mongo; do echo waiting for keycloak; sleep 2; done;' ]

  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: operator
      labels:
        app.kubernetes.io/name: operator
        app.kubernetes.io/instance: operator
        app.kubernetes.io/version: 1.0.0
        app.kubernetes.io/managed-by: spaship
        app.openshift.io/runtime: operator
        app.kubernetes.io/part-of: spaship
    spec:
      selector:
        matchLabels:
          app.kubernetes.io/name: operator
          app.kubernetes.io/instance: operator
      template:
        metadata:
          labels:
            app.kubernetes.io/name: operator
            app.kubernetes.io/instance: operator
        spec:
          serviceAccountName: light-cd
          securityContext:
            {}
          containers:
            - name: operator
              securityContext:
                {}
              image: "${OPERATOR_REPOSITORY}:${TAG_OPERATOR}"
              envFrom:
                - configMapRef:
                    name: operator-config
              imagePullPolicy: Always
              ports:
                - name: http
                  containerPort: 8080
                  protocol: TCP
              livenessProbe:
                tcpSocket:
                  port: http
                initialDelaySeconds: 30
                periodSeconds: 10
              readinessProbe:
                tcpSocket:
                  port: http
                initialDelaySeconds: 30
                periodSeconds: 10
              resources:
                limits:
                  cpu: 600m
                  memory: 512Mi
                requests:
                  cpu: 300m
                  memory: 256Mi

  - kind: HorizontalPodAutoscaler
    apiVersion: autoscaling/v2beta1
    metadata:
      name: spaship-api
      labels:
        app.kubernetes.io/name: spaship-api
        app.kubernetes.io/instance: spaship-api
        app.kubernetes.io/version: 1.0.0
        app.kubernetes.io/managed-by: spaship
    spec:
      scaleTargetRef:
        apiVersion: apps/v1
        kind: Deployment
        name: spaship-api
      minReplicas: 1
      maxReplicas: 1
      metrics:
        - type: Resource
          resource:
            name: cpu
            targetAverageUtilization: 80
        - type: Resource
          resource:
            name: memory
            targetAverageUtilization: 80
  - kind: Ingress
    apiVersion: networking.k8s.io/v1
    metadata:
      name: ing-${APP_INSTANCE}-operator
      labels:
        app.kubernetes.io/managed-by: light-cd
        shard: internal
    spec:
      rules:
        - host: ${APP_INSTANCE}.operator.${DOMAIN}
          http:
            paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: operator-service
                    port:
                      number: 8080
  - kind: Ingress
    apiVersion: networking.k8s.io/v1
    metadata:
      name: ing-${APP_INSTANCE}-api
      labels:
        app.kubernetes.io/managed-by: light-cd
        shard: internal
    spec:
      rules:
        - host: ${APP_INSTANCE}.api.${DOMAIN}
          http:
            paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: spaship-api-service
                    port:
                      number: 3000